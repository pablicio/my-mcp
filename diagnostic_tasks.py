#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Diagn√≥stico e Corre√ß√£o do Problema de Sincroniza√ß√£o de Tarefas

Problema:
- Tarefas criadas via Claude (MCP) n√£o aparecem na interface web
- Interface web mostra dados desatualizados

Causa:
- Duas inst√¢ncias separadas do TasksModule (MCP Server e API Server)
- Ambas l√™em/escrevem no mesmo arquivo, mas t√™m caches em mem√≥ria

Solu√ß√£o:
1. Verificar se o arquivo est√° sendo atualizado
2. For√ßar reload dos dados no API Server
3. Adicionar polling mais frequente ou webhook
"""

import json
import asyncio
from pathlib import Path
import sys

sys.path.insert(0, str(Path(__file__).parent))

from modules.tasks.tools import TasksTools
from config.settings import settings


async def diagnostico():
    """Diagn√≥stico completo do sistema de tarefas"""
    print("="*70)
    print("üîç DIAGN√ìSTICO: Sistema de Tarefas")
    print("="*70)
    print()
    
    # 1. Verificar arquivo JSON
    json_path = Path(settings.TASKS_DB_PATH)
    print(f"üìÇ Arquivo de dados: {json_path}")
    print(f"   Existe: {json_path.exists()}")
    
    if json_path.exists():
        print(f"   Tamanho: {json_path.stat().st_size} bytes")
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"   Tarefas no arquivo: {len(data.get('tasks', []))}")
        print(f"   Notas no arquivo: {len(data.get('notes', []))}")
        print(f"   √öltima atualiza√ß√£o: {data.get('last_updated', 'N/A')}")
    print()
    
    # 2. Inicializar m√≥dulo e verificar
    print("üîß Inicializando m√≥dulo de tarefas...")
    tasks_module = TasksTools()
    await tasks_module.initialize()
    print(f"   Tarefas em mem√≥ria: {len(tasks_module.tasks)}")
    print(f"   Notas em mem√≥ria: {len(tasks_module.notes)}")
    print()
    
    # 3. Listar tarefas atuais
    if tasks_module.tasks:
        print("üìã Tarefas encontradas:")
        for task in tasks_module.tasks:
            status = "‚úÖ" if task['completed'] else "‚è≥"
            print(f"   {status} #{task['id']} - {task['title']}")
    else:
        print("   ‚ö†Ô∏è Nenhuma tarefa encontrada na mem√≥ria")
    print()
    
    # 4. Teste de escrita
    print("‚úçÔ∏è Testando escrita de tarefa...")
    result = await tasks_module.create_task(
        title="Teste de Sincroniza√ß√£o",
        description="Tarefa criada pelo script de diagn√≥stico",
        priority="medium"
    )
    print(f"   Resultado: {result}")
    print(f"   Tarefas ap√≥s cria√ß√£o: {len(tasks_module.tasks)}")
    print()
    
    # 5. Verificar se foi salvo no arquivo
    print("üíæ Verificando salvamento no arquivo...")
    await asyncio.sleep(0.5)  # Pequeno delay
    with open(json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    print(f"   Tarefas no arquivo agora: {len(data.get('tasks', []))}")
    
    # Mostrar √∫ltima tarefa salva
    if data.get('tasks'):
        last_task = data['tasks'][-1]
        print(f"   √öltima tarefa: #{last_task['id']} - {last_task['title']}")
    print()
    
    # 6. Teste de reload
    print("üîÑ Testando reload de outro m√≥dulo...")
    tasks_module2 = TasksTools()
    await tasks_module2.initialize()
    print(f"   Tarefas carregadas: {len(tasks_module2.tasks)}")
    print()
    
    print("="*70)
    print("‚úÖ DIAGN√ìSTICO CONCLU√çDO")
    print("="*70)
    print()
    
    # An√°lise
    print("üìä AN√ÅLISE:")
    if len(tasks_module.tasks) == len(tasks_module2.tasks):
        print("   ‚úÖ Sincroniza√ß√£o est√° funcionando!")
        print("   ‚úÖ Ambas as inst√¢ncias t√™m os mesmos dados")
    else:
        print("   ‚ùå PROBLEMA: Inst√¢ncias desincronizadas")
        print(f"   Inst√¢ncia 1: {len(tasks_module.tasks)} tarefas")
        print(f"   Inst√¢ncia 2: {len(tasks_module2.tasks)} tarefas")
    print()
    
    # Recomenda√ß√µes
    print("üí° RECOMENDA√á√ïES:")
    print("   1. Reinicie o API Server (api_server.py)")
    print("   2. A interface web atualizar√° em 5 segundos")
    print("   3. Se persistir, verifique logs em ./logs/")
    print()


async def corrigir():
    """For√ßa a sincroniza√ß√£o entre MCP e API Server"""
    print("="*70)
    print("üîß CORRE√á√ÉO: For√ßando sincroniza√ß√£o")
    print("="*70)
    print()
    
    # 1. Carregar do arquivo
    json_path = Path(settings.TASKS_DB_PATH)
    if not json_path.exists():
        print("‚ùå Arquivo tasks.json n√£o encontrado!")
        return
    
    with open(json_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print(f"üìÇ Arquivo: {json_path}")
    print(f"   Tarefas: {len(data.get('tasks', []))}")
    print(f"   Notas: {len(data.get('notes', []))}")
    print()
    
    # 2. For√ßar atualiza√ß√£o do timestamp
    from datetime import datetime
    data['last_updated'] = datetime.now().isoformat()
    
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Arquivo atualizado com timestamp atual")
    print("‚úÖ Reinicie o API Server para aplicar mudan√ßas")
    print()


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--fix":
        asyncio.run(corrigir())
    else:
        asyncio.run(diagnostico())
    
    print("Para for√ßar corre√ß√£o, execute:")
    print("  python diagnostic_tasks.py --fix")
    print()
