#!/usr/bin/env python3
"""
üßπ Script de limpeza do projeto MCP Server Pessoal
Remove arquivos tempor√°rios, documenta√ß√£o redundante e configura√ß√µes de debug.
"""

import os
import shutil
from pathlib import Path

# Arquivos MD desnecess√°rios para remover
MD_FILES_TO_REMOVE = [
    "GUIA_COMPLETO.md",
    "QUICK_REFERENCE.md",
    "FAQ.md",
    "COMO_USAR.md",
    "TESTES.md",
    "GUIA_EXECUCAO.md",
    "SUMARIO.md",
    "CORRECAO_ENV.md",
    "CORRECOES_DEPENDENCIAS.md"
]

# Arquivos TXT desnecess√°rios
TXT_FILES_TO_REMOVE = [
    "CORRECAO_DEFINITIVA.txt",
    "CORRECAO_FINAL.txt",
    "RESUMO_COMPLETO.txt",
    "RESUMO_CORRECOES.txt",
    "RESUMO_ENV.txt",
    "STATUS.txt"
]

# Scripts de debug/fix tempor√°rios
DEBUG_FILES_TO_REMOVE = [
    "check_env.py",
    "debug_env.py",
    "fix_env.py",
    "test_env.py",
    "test_imports.py",
    "test_settings_simple.py",
    "cleanup_project.py"  # Este pr√≥prio script ser√° removido ap√≥s execu√ß√£o
]

# Arquivos BAT de teste tempor√°rios
BAT_FILES_TO_REMOVE = [
    "test_all.bat",
    "test_final.bat",
    "fix_dependencies.bat"
]

# Outros arquivos
OTHER_FILES_TO_REMOVE = [
    "index.html"
]

def remove_files(file_list, description):
    """Remove uma lista de arquivos."""
    print(f"\nüìù Removendo {description}...")
    removed = 0
    for filename in file_list:
        filepath = Path(filename)
        if filepath.exists():
            try:
                filepath.unlink()
                print(f"   ‚úÖ Removido: {filename}")
                removed += 1
            except Exception as e:
                print(f"   ‚ùå Erro ao remover {filename}: {e}")
        else:
            print(f"   ‚è≠Ô∏è  N√£o encontrado: {filename}")
    return removed

def main():
    """Executa a limpeza do projeto."""
    print("="*60)
    print("üßπ LIMPEZA DO PROJETO MCP SERVER PESSOAL")
    print("="*60)
    print("\nEste script ir√° remover arquivos desnecess√°rios:")
    print("  - Documenta√ß√£o redundante")
    print("  - Scripts de debug tempor√°rios")
    print("  - Arquivos de corre√ß√£o/status tempor√°rios")
    print("\n‚ö†Ô∏è  ATEN√á√ÉO: Esta a√ß√£o n√£o pode ser desfeita!")
    
    response = input("\nDeseja continuar? (s/N): ").strip().lower()
    if response != 's':
        print("‚ùå Opera√ß√£o cancelada.")
        return
    
    total_removed = 0
    
    # Remover cada categoria
    total_removed += remove_files(MD_FILES_TO_REMOVE, "arquivos Markdown desnecess√°rios")
    total_removed += remove_files(TXT_FILES_TO_REMOVE, "arquivos TXT tempor√°rios")
    total_removed += remove_files(DEBUG_FILES_TO_REMOVE, "scripts de debug")
    total_removed += remove_files(BAT_FILES_TO_REMOVE, "scripts BAT de teste")
    total_removed += remove_files(OTHER_FILES_TO_REMOVE, "outros arquivos")
    
    print("\n" + "="*60)
    print(f"‚úÖ Limpeza conclu√≠da!")
    print(f"üìä Total de arquivos removidos: {total_removed}")
    print("="*60)
    
    print("\nüìÅ Estrutura limpa mant√©m:")
    print("   ‚úÖ README.md - Documenta√ß√£o principal")
    print("   ‚úÖ .env / .env.example - Configura√ß√µes")
    print("   ‚úÖ setup.py - Script de instala√ß√£o")
    print("   ‚úÖ main.py - Servidor")
    print("   ‚úÖ start.bat / start.sh - Scripts de inicializa√ß√£o")
    print("   ‚úÖ tests/ - Todos os testes centralizados")
    print("   ‚úÖ core/, modules/, config/, utils/ - C√≥digo fonte")
    
    print("\nüí° Pr√≥ximos passos:")
    print("   1. Revise o README.md atualizado")
    print("   2. Execute: python -m tests.quick_test")
    print("   3. Execute: python main.py")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Opera√ß√£o cancelada pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
