"""
üìÅ Ferramentas de sistema de arquivos com seguran√ßa.
"""

import os
import json
import asyncio
import aiofiles
from pathlib import Path
from typing import List, Dict, Any, Optional
from datetime import datetime

from modules.base import BaseModule
from config.settings import settings
from utils.validators import validate_path
from core.security import is_path_allowed

class FilesystemTools(BaseModule):
    """M√≥dulo de acesso seguro ao sistema de arquivos."""

    def __init__(self):
        super().__init__()
        self.allowed_dirs = []

    async def is_available(self) -> bool:
        """Verifica se h√° diret√≥rios permitidos configurados."""
        return bool(settings.ALLOWED_DIRECTORIES)

    async def initialize(self):
        """Inicializa e valida os diret√≥rios permitidos."""
        try:
            self.allowed_dirs = settings.get_allowed_directories()
            
            if not self.allowed_dirs:
                raise ValueError("Nenhum diret√≥rio v√°lido configurado")
            
            for dir_path in self.allowed_dirs:
                self.logger.info(f"Diret√≥rio permitido: {dir_path}")

            self.initialized = True
            self.logger.info(f"Filesystem inicializado com {len(self.allowed_dirs)} diret√≥rios")

        except Exception as e:
            self.logger.error(f"Erro ao inicializar Filesystem: {e}")
            raise

    def get_tools(self) -> Dict[str, callable]:
        """Retorna as ferramentas do filesystem."""
        return {
            "read_file": self.read_file,
            "write_file": self.write_file,
            "list_directory": self.list_directory,
            "search_files": self.search_files,
            "delete_file": self.delete_file,
            "create_directory": self.create_directory,
            "file_info": self.file_info
        }

    async def read_file(self, filepath: str) -> str:
        """
        L√™ o conte√∫do de um arquivo.

        Args:
            filepath: Caminho para o arquivo

        Returns:
            Conte√∫do do arquivo ou mensagem de erro
        """
        try:
            path = validate_path(filepath)

            if not is_path_allowed(path, self.allowed_dirs):
                return f"Erro: Acesso negado ao caminho {filepath}"

            if not path.exists():
                return f"Erro: Arquivo n√£o encontrado {filepath}"

            if not path.is_file():
                return f"Erro: Caminho n√£o √© um arquivo {filepath}"

            # Verificar tamanho do arquivo (limite de 10MB)
            if path.stat().st_size > settings.MAX_FILE_SIZE:
                return f"Erro: Arquivo muito grande (>10MB) {filepath}"

            async with aiofiles.open(path, 'r', encoding='utf-8') as f:
                content = await f.read()

            self.logger.info(f"Arquivo lido: {filepath}")
            return content

        except UnicodeDecodeError:
            return f"Erro: Arquivo n√£o √© texto UTF-8 {filepath}"
        except Exception as e:
            self.logger.error(f"Erro ao ler arquivo {filepath}: {e}")
            return f"Erro ao ler arquivo: {str(e)}"

    async def write_file(self, filepath: str, content: str, overwrite: bool = False) -> str:
        """
        Escreve conte√∫do em um arquivo.

        Args:
            filepath: Caminho para o arquivo
            content: Conte√∫do a escrever
            overwrite: Se deve sobrescrever arquivo existente

        Returns:
            Mensagem de sucesso ou erro
        """
        try:
            path = validate_path(filepath)

            if not is_path_allowed(path, self.allowed_dirs):
                return f"Erro: Acesso negado ao caminho {filepath}"

            if path.exists() and not overwrite:
                return f"Erro: Arquivo j√° existe, use overwrite=True {filepath}"

            # Criar diret√≥rio pai se n√£o existir
            path.parent.mkdir(parents=True, exist_ok=True)

            async with aiofiles.open(path, 'w', encoding='utf-8') as f:
                await f.write(content)

            self.logger.info(f"Arquivo escrito: {filepath}")
            return f"Arquivo {filepath} salvo com sucesso ({len(content)} caracteres)"

        except Exception as e:
            self.logger.error(f"Erro ao escrever arquivo {filepath}: {e}")
            return f"Erro ao escrever arquivo: {str(e)}"

    async def list_directory(self, dir_path: str = ".", recursive: bool = False) -> str:
        """
        Lista conte√∫do de um diret√≥rio.

        Args:
            dir_path: Caminho do diret√≥rio
            recursive: Se deve listar recursivamente

        Returns:
            Lista formatada do conte√∫do
        """
        try:
            path = validate_path(dir_path)

            if not is_path_allowed(path, self.allowed_dirs):
                return f"Erro: Acesso negado ao caminho {dir_path}"

            if not path.exists():
                return f"Erro: Diret√≥rio n√£o encontrado {dir_path}"

            if not path.is_dir():
                return f"Erro: Caminho n√£o √© um diret√≥rio {dir_path}"

            items = []

            if recursive:
                for item in path.rglob("*"):
                    if item.is_file():
                        rel_path = item.relative_to(path)
                        size = item.stat().st_size
                        items.append(f"üìÑ {rel_path} ({size} bytes)")
                    elif item.is_dir():
                        rel_path = item.relative_to(path)
                        items.append(f"üìÅ {rel_path}/")
            else:
                for item in sorted(path.iterdir()):
                    if item.is_file():
                        size = item.stat().st_size
                        items.append(f"üìÑ {item.name} ({size} bytes)")
                    elif item.is_dir():
                        items.append(f"üìÅ {item.name}/")

            if not items:
                return f"Diret√≥rio vazio: {dir_path}"

            result = f"Conte√∫do de {dir_path}:\n"
            result += "\n".join(items[:100])  # Limitar a 100 itens

            if len(items) > 100:
                result += f"\n... e mais {len(items) - 100} itens"

            return result

        except Exception as e:
            self.logger.error(f"Erro ao listar diret√≥rio {dir_path}: {e}")
            return f"Erro ao listar diret√≥rio: {str(e)}"

    async def search_files(self, pattern: str, dir_path: str = ".", max_results: int = 50) -> str:
        """
        Busca arquivos por padr√£o de nome.

        Args:
            pattern: Padr√£o de busca (suporta wildcards)
            dir_path: Diret√≥rio para buscar
            max_results: M√°ximo de resultados

        Returns:
            Lista de arquivos encontrados
        """
        try:
            path = validate_path(dir_path)

            if not is_path_allowed(path, self.allowed_dirs):
                return f"Erro: Acesso negado ao caminho {dir_path}"

            if not path.exists() or not path.is_dir():
                return f"Erro: Diret√≥rio inv√°lido {dir_path}"

            matches = list(path.rglob(pattern))[:max_results]

            if not matches:
                return f"Nenhum arquivo encontrado com padr√£o '{pattern}' em {dir_path}"

            result = f"Arquivos encontrados com padr√£o '{pattern}':\n"
            for match in matches:
                if match.is_file():
                    rel_path = match.relative_to(path)
                    size = match.stat().st_size
                    result += f"üìÑ {rel_path} ({size} bytes)\n"
                elif match.is_dir():
                    rel_path = match.relative_to(path)
                    result += f"üìÅ {rel_path}/\n"

            if len(matches) == max_results:
                result += f"\nMostrando primeiros {max_results} resultados"

            return result

        except Exception as e:
            self.logger.error(f"Erro ao buscar arquivos: {e}")
            return f"Erro na busca: {str(e)}"

    async def file_info(self, filepath: str) -> str:
        """
        Obt√©m informa√ß√µes detalhadas sobre um arquivo.

        Args:
            filepath: Caminho do arquivo

        Returns:
            Informa√ß√µes formatadas do arquivo
        """
        try:
            path = validate_path(filepath)

            if not is_path_allowed(path, self.allowed_dirs):
                return f"Erro: Acesso negado ao caminho {filepath}"

            if not path.exists():
                return f"Erro: Arquivo n√£o encontrado {filepath}"

            stat = path.stat()

            info = f"Informa√ß√µes de {filepath}:\n"
            info += f"Tipo: {'Arquivo' if path.is_file() else 'Diret√≥rio' if path.is_dir() else 'Outro'}\n"
            info += f"Tamanho: {stat.st_size:,} bytes\n"
            info += f"Modificado: {datetime.fromtimestamp(stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S')}\n"
            info += f"Criado: {datetime.fromtimestamp(stat.st_ctime).strftime('%Y-%m-%d %H:%M:%S')}\n"
            info += f"Permiss√µes: {oct(stat.st_mode)[-3:]}\n"

            if path.is_file():
                # Detectar tipo de arquivo pela extens√£o
                suffix = path.suffix.lower()
                file_types = {
                    '.txt': 'Texto', '.md': 'Markdown', '.py': 'Python', 
                    '.js': 'JavaScript', '.json': 'JSON', '.csv': 'CSV', '.pdf': 'PDF'
                }
                file_type = file_types.get(suffix, 'Desconhecido')
                info += f"Tipo de arquivo: {file_type}\n"

            return info

        except Exception as e:
            self.logger.error(f"Erro ao obter info do arquivo {filepath}: {e}")
            return f"Erro ao obter informa√ß√µes: {str(e)}"

    async def delete_file(self, filepath: str, confirm: bool = False) -> str:
        """Deleta um arquivo com confirma√ß√£o."""
        try:
            if not confirm:
                return f"ATEN√á√ÉO: Deletar '{filepath}' permanentemente? Use confirm=True para confirmar."

            path = validate_path(filepath)

            if not is_path_allowed(path, self.allowed_dirs):
                return f"Erro: Acesso negado ao caminho {filepath}"

            if not path.exists():
                return f"Erro: Arquivo n√£o encontrado {filepath}"

            if path.is_file():
                path.unlink()
                self.logger.warning(f"Arquivo deletado: {filepath}")
                return f"Arquivo {filepath} deletado com sucesso"
            else:
                return f"Erro: Use ferramenta espec√≠fica para deletar diret√≥rios {filepath}"

        except Exception as e:
            self.logger.error(f"Erro ao deletar arquivo {filepath}: {e}")
            return f"Erro ao deletar arquivo: {str(e)}"

    async def create_directory(self, dir_path: str) -> str:
        """Cria um novo diret√≥rio."""
        try:
            path = validate_path(dir_path)

            if not is_path_allowed(path, self.allowed_dirs):
                return f"Erro: Acesso negado ao caminho {dir_path}"

            path.mkdir(parents=True, exist_ok=False)
            self.logger.info(f"Diret√≥rio criado: {dir_path}")
            return f"Diret√≥rio {dir_path} criado com sucesso"

        except FileExistsError:
            return f"Erro: Diret√≥rio j√° existe {dir_path}"
        except Exception as e:
            self.logger.error(f"Erro ao criar diret√≥rio {dir_path}: {e}")
            return f"Erro ao criar diret√≥rio: {str(e)}"
